<?php

namespace App\Http\Controllers;

use App\Models\Post;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class PostController extends Controller
{

    public function index()
    {
        $posts = Post::with(['user', 'location', 'images'])->latest()->get();

        return response()->json($posts);
    }

    public function store(Request $request)
    {
        $request->validate([
            'title' => 'nullable|string|max:255', // –¢–∞“õ—ã—Ä—ã–ø—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è–ª–∞—É
            'content' => 'nullable|string',
            'location_id' => 'required|exists:locations,id',
            'images.*' => 'image|max:2048',
            'images' => 'array|max:10',
            'saved' => 'nullable|boolean', // –°–∞“õ—Ç–∞—É–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è–ª–∞—É
        ]);

        $post = Post::create([
            'user_id' => auth()->id(),
            'location_id' => $request->location_id,
            'title' => $request->title, // –¢–∞“õ—ã—Ä—ã–ø—Ç—ã “õ–æ—Å—É
            'content' => $request->content,
            'saved' => $request->saved ?? false, // –°–∞“õ—Ç–∞—É–¥—ã “õ–æ—Å—É, –µ–≥–µ—Ä –∂–æ“õ –±–æ–ª—Å–∞ false
        ]);

        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $path = $image->store('post_images', 'public');
                $post->images()->create(['image_path' => $path]);
            }
        }

        return response()->json(['message' => '–ü–æ—Å—Ç —Å”ô—Ç—Ç—ñ “õ“±—Ä—ã–ª–¥—ã', 'post' => $post->load('images')], 201);
    }


    // üìå –ù–∞“õ—Ç—ã –ø–æ—Å—Ç—Ç—ã –∫”©—Ä—É + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π–ª–µ—Ä –æ—Ä–Ω—ã
    public function show($id)
    {
        $post = Post::with(['user', 'location', 'images', 'comments.user'])->findOrFail($id);

        return response()->json($post);
    }

    // üìå –ü–æ—Å—Ç—Ç—ã –∂–∞“£–∞—Ä—Ç—É
    public function update(Request $request, $id)
    {
        $post = Post::findOrFail($id);

        // –ê–≤—Ç–æ—Ä–ª—ã“õ—Ç—ã —Ç–µ–∫—Å–µ—Ä—É (“õ–∞–∂–µ—Ç –±–æ–ª—Å–∞)
        if ($post->user_id !== auth()->id()) {
            return response()->json(['message' => '“ö“±“õ—ã“ì—ã“£—ã–∑ –∂–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑'], 403);
        }

        $request->validate([
            'title' => 'nullable|string|max:255', // –¢–∞“õ—ã—Ä—ã–ø—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è–ª–∞—É
            'content' => 'nullable|string',
            'location_id' => 'exists:locations,id',
            'images.*' => 'image|max:2048',
            'images' => 'array|max:10',
            'saved' => 'nullable|boolean', // –°–∞“õ—Ç–∞—É–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è–ª–∞—É
        ]);

        $post->update([
            'title' => $request->title ?? $post->title, // –¢–∞“õ—ã—Ä—ã–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É
            'content' => $request->content,
            'location_id' => $request->location_id ?? $post->location_id,
            'saved' => $request->saved ?? $post->saved, // –°–∞“õ—Ç–∞—É–¥—ã –∂–∞“£–∞—Ä—Ç—É
        ]);

        if ($request->hasFile('images')) {
            // –ï—Å–∫—ñ —Å—É—Ä–µ—Ç—Ç–µ—Ä–¥—ñ –∂–æ—é
            foreach ($post->images as $image) {
                Storage::disk('public')->delete($image->image_path);
                $image->delete();
            }

            foreach ($request->file('images') as $image) {
                $path = $image->store('post_images', 'public');
                $post->images()->create(['image_path' => $path]);
            }
        }

        return response()->json(['message' => '–ü–æ—Å—Ç –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã', 'post' => $post->load('images')]);
    }

    // üìå –ü–æ—Å—Ç—Ç—ã –∂–æ—é
    public function destroy($id)
    {
        $post = Post::findOrFail($id);

        if ($post->user_id !== auth()->id()) {
            return response()->json(['message' => '“ö“±“õ—ã“ì—ã“£—ã–∑ –∂–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑'], 403);
        }

        foreach ($post->images as $image) {
            Storage::disk('public')->delete($image->image_path);
            $image->delete();
        }

        $post->delete();

        return response()->json(['message' => '–ü–æ—Å—Ç –∂–æ–π—ã–ª–¥—ã']);
    }

}
